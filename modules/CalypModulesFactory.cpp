/*    This file is a part of Calyp project
 *    Copyright (C) 2014-2021  by Joao Carreira   (jfmcarreira@gmail.com)
 *                                Luis Lucas      (luisfrlucas@gmail.com)
 *
 *    This program is free software; you can redistribute it and/or modify
 *    it under the terms of the GNU General Public License as published by
 *    the Free Software Foundation; either version 2 of the License, or
 *    (at your option) any later version.
 *
 *    This program is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *    GNU General Public License for more details.
 *
 *   You should have received a copy of the GNU General Public License along
 *   with this program; if not, write to the Free Software Foundation, Inc.,
 *   51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 */

/**
 * \file     CalypModuleFactory.cpp
 * \brief    Calyp modules factory
 */

#include "CalypModulesFactory.h"

#include "config.h"
#ifdef USE_DYNLOAD
#include <dlfcn.h>

#include <iostream>
#endif

// Generated by cmake
#include "ModulesListHeader.h"

CalypModulesFactory::CalypModulesFactory()
{
  REGISTER_ALL_MODULES
}

void CalypModulesFactory::Register( const std::string& moduleName, std::function<CalypModulePtr( void )> pfnCreate )
{
  m_FactoryMap[moduleName] = pfnCreate;
}

void CalypModulesFactory::Register( const char* moduleName, std::function<CalypModulePtr( void )> pfnCreate )
{
  Register( moduleName, pfnCreate );
}

bool CalypModulesFactory::RegisterDl( const char* dlName )
{
  // #ifdef USE_DYNLOAD
  //   void* pHndl = dlopen( dlName, RTLD_NOW );
  //   if( pHndl == NULL )
  //   {
  //     std::cerr << dlerror() << std::endl;
  //     return false;
  //   }
  //   CreateModuleFn pfnCreate = (CreateModuleFn)dlsym( pHndl, "Maker" );
  //   if( pfnCreate == NULL )
  //   {
  //     return false;
  //   }
  //   Register( dlName, pfnCreate );
  //   return true;
  // #else
  return false;
  // #endif
}

CalypModulePtr CalypModulesFactory::CreateModule( const std::string& moduleName ) const
{
  const auto& moduleFactoryMap = CalypModulesFactory::Get()->getMap();

  if( moduleFactoryMap.contains( moduleName ) )
  {
    auto createFct = moduleFactoryMap.at( moduleName );
    return createFct();
  }
  return nullptr;
}